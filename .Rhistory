panel.grid.minor = element_blank(),
panel.grid.major = element_line(linetype = 'dotted', color = 'gray', linewidth = line.size),
panel.background = element_blank(),
panel.border = element_rect(colour = "black", fill = NA, linewidth = line.size),
legend.title = element_text(size = title.size, colour = "black", face = "plain"),
legend.text = element_text(size = text.size, face ="plain", colour ="black"),
legend.position = "top",
legend.box = "vertical",
legend.box.margin = margin(-4,0,-4,0, "pt"),
legend.margin = margin(0, 0, 0, 0, "pt"),
legend.key = element_blank(),
plot.margin = margin(0, 0, 0, 0, "cm"),
plot.title = element_text(size =title.size, face = "plain", hjust = -0.03, vjust = -1))+
guides(color = guide_legend(order=1, override.aes=list(shape = 21, size = 3)),
shape = guide_legend(order=2, override.aes=list(size = 2)))
#PLOT OPTIONS
text.size <- 8
text.size.small <- 6
title.size <- 9
line.size <- 0.3
line.size.thin <- 0.1
strip.text.size <- 8
ggplot(coords_m1, aes(x = CAP1, y = CAP2, color=habitat)) +
geom_point(size = 2)+
stat_ellipse(aes(fill = habitat), alpha = 0.2, type = 't', size = 1, geom="polygon", level = 0.95)+
scale_color_discrete(name= "Habitat:")+
scale_shape_discrete(name = "Sampling method:")+
scale_x_continuous(name = "NMDS1")+
scale_y_continuous(name = "NMDS2")+
ggtitle("a)")+
theme(axis.text.y = element_text(colour = "black", size = text.size, face = "plain"),
axis.text.x = element_text(colour = "black", face = "plain", size = text.size),
axis.title.y = element_text(face = "plain", size = title.size),
axis.title.x = element_text(face = "plain", size = title.size, colour = "black"),
panel.grid.minor = element_blank(),
panel.grid.major = element_line(linetype = 'dotted', color = 'gray', linewidth = line.size),
panel.background = element_blank(),
panel.border = element_rect(colour = "black", fill = NA, linewidth = line.size),
legend.title = element_text(size = title.size, colour = "black", face = "plain"),
legend.text = element_text(size = text.size, face ="plain", colour ="black"),
legend.position = "top",
legend.box = "vertical",
legend.box.margin = margin(-4,0,-4,0, "pt"),
legend.margin = margin(0, 0, 0, 0, "pt"),
legend.key = element_blank(),
plot.margin = margin(0, 0, 0, 0, "cm"),
plot.title = element_text(size =title.size, face = "plain", hjust = -0.03, vjust = -1))+
guides(color = guide_legend(order=1, override.aes=list(shape = 21, size = 3)),
shape = guide_legend(order=2, override.aes=list(size = 2)))
#Compute dispersion for groups (e.g., Habitat)
dispersion <- betadisper(dbrda_model$CA$u, df_variables$habitat)
# Perform dbRDA (distance-based RDA)
dist_matrix <- vegdist(Herb_spp, method = "bray")
dbrda_model <- capscale(dist_matrix ~ df_variables$habitat)
#Compute dispersion for groups (e.g., Habitat)
dispersion <- betadisper(dist_matrix, df_variables$habitat)
# Check the dispersion values
dispersion
#Compute dispersion for groups (e.g., Habitat)
disper <- betadisper(dist_matrix, df_variables$habitat, type = "median")
anova(disper) # Test for homogeneity of dispersion
boxplot(disper)
TukeyHSD(disper)
ggplot(coords_m1, aes(x = CAP1, y = CAP2, color=habitat)) +
geom_point(size = 2)+
stat_ellipse(aes(fill = habitat), alpha = 0.2, type = 't', size = 1, geom="polygon", level = 0.95)+
scale_color_discrete(name= "Habitat:")+
scale_shape_discrete(name = "Sampling method:")+
scale_x_continuous(name = "NMDS1")+
scale_y_continuous(name = "NMDS2")+
ggtitle("a)")+
theme(axis.text.y = element_text(colour = "black", size = text.size, face = "plain"),
axis.text.x = element_text(colour = "black", face = "plain", size = text.size),
axis.title.y = element_text(face = "plain", size = title.size),
axis.title.x = element_text(face = "plain", size = title.size, colour = "black"),
panel.grid.minor = element_blank(),
panel.grid.major = element_line(linetype = 'dotted', color = 'gray', linewidth = line.size),
panel.background = element_blank(),
panel.border = element_rect(colour = "black", fill = NA, linewidth = line.size),
legend.title = element_text(size = title.size, colour = "black", face = "plain"),
legend.text = element_text(size = text.size, face ="plain", colour ="black"),
legend.position = "top",
legend.box = "vertical",
legend.box.margin = margin(-4,0,-4,0, "pt"),
legend.margin = margin(0, 0, 0, 0, "pt"),
legend.key = element_blank(),
plot.margin = margin(0, 0, 0, 0, "cm"),
plot.title = element_text(size =title.size, face = "plain", hjust = -0.03, vjust = -1))+
guides(color = guide_legend(order=1, override.aes=list(shape = 21, size = 3)),
shape = guide_legend(order=2, override.aes=list(size = 2)))
#Compute dispersion for groups (e.g., Habitat)
disper <- betadisper(dist_matrix, df_variables$habitat, type = "centroid")
anova(disper) # Test for homogeneity of dispersion
boxplot(disper)
TukeyHSD(disper)
#Compute dispersion for groups (e.g., Habitat)
disper <- betadisper(dist_matrix, df_variables$habitat, type = "median")
anova(disper) # Test for homogeneity of dispersion
boxplot(disper)
TukeyHSD(disper)
#Compute dispersion for groups (e.g., Habitat)
disper <- betadisper(dist_matrix, df_variables$habitat, type = "centroid")
anova(disper) # Test for homogeneity of dispersion
boxplot(disper)
TukeyHSD(disper)
boxplot(disper)
ggplot(coords_m1, aes(x = CAP1, y = CAP2, color=habitat)) +
geom_point(size = 2)+
stat_ellipse(aes(fill = habitat), alpha = 0.2, type = 't', size = 1, geom="polygon", level = 0.95)+
scale_color_discrete(name= "Habitat:")+
scale_shape_discrete(name = "Sampling method:")+
scale_x_continuous(name = "NMDS1")+
scale_y_continuous(name = "NMDS2")+
ggtitle("a)")+
theme(axis.text.y = element_text(colour = "black", size = text.size, face = "plain"),
axis.text.x = element_text(colour = "black", face = "plain", size = text.size),
axis.title.y = element_text(face = "plain", size = title.size),
axis.title.x = element_text(face = "plain", size = title.size, colour = "black"),
panel.grid.minor = element_blank(),
panel.grid.major = element_line(linetype = 'dotted', color = 'gray', linewidth = line.size),
panel.background = element_blank(),
panel.border = element_rect(colour = "black", fill = NA, linewidth = line.size),
legend.title = element_text(size = title.size, colour = "black", face = "plain"),
legend.text = element_text(size = text.size, face ="plain", colour ="black"),
legend.position = "top",
legend.box = "vertical",
legend.box.margin = margin(-4,0,-4,0, "pt"),
legend.margin = margin(0, 0, 0, 0, "pt"),
legend.key = element_blank(),
plot.margin = margin(0, 0, 0, 0, "cm"),
plot.title = element_text(size =title.size, face = "plain", hjust = -0.03, vjust = -1))+
guides(color = guide_legend(order=1, override.aes=list(shape = 21, size = 3)),
shape = guide_legend(order=2, override.aes=list(size = 2)))
#Compute dispersion for groups (e.g., Habitat)
disper <- betadisper(dist_matrix, df_variables$habitat, type = "centroid")
anova(disper) # Test for homogeneity of dispersion
boxplot(disper)
TukeyHSD(disper)
TukeyHSD(disper)
#Compute dispersion for groups (e.g., Habitat)
disper <- betadisper(dist_matrix, df_variables$habitat, type = "centroid")
disper
boxplot(disper)
TukeyHSD(disper)
pairwise_response1
tukey_results <- TukeyHSD(disper)
# Adjust p-values using FDR (False Discovery Rate)
tukey_results$`df_variables$habitat`$p.adj <- p.adjust(tukey_results$`df_variables$habitat`$p.value, method = "fdr")
tukey_results
View(tukey_results)
tukey_results
tukey_results[["group"]]
# Adjust p-values using FDR (False Discovery Rate)
tukey_results$`df_variables$habitat`$p.adj <- p.adjust(tukey_results$`df_variables$habitat`$p.value, method = "fdr")
tukey_results
tukey_results
tukey_results
tukey_results[["group"]]
tuley_results$group
tukey_results$group
tukey_results <- TukeyHSD(disper)
tukey_results
# Adjust p-values using FDR (False Discovery Rate)
tukey_results$`df_variables$habitat`$p.adj <- p.adjust(tukey_results$`df_variables$habitat`$p.value, method = "fdr")
tukey_results$group
tukey_results$`df_variables$habitat`$p.value
tukey_results
tukey_results <- TukeyHSD(disper)
tukey_results
tukey_results$group$p.value
tukey_results$group
tukey_results$group$p adj
tukey_results <- TukeyHSD(disper)
tukey_results
tukey_results$`df_variables$habitat`$p.adj
# Adjust p-values using FDR (False Discovery Rate)
tukey_results$`df_variables$habitat`$p.adj <- p.adjust(tukey_results$group$p.adj, method = "fdr")
tukey_results <- TukeyHSD(disper)
tukey_results$`df_variables$habitat`$p.adj
tukey_results$group$p.adj
tukey_results <- TukeyHSD(disper)
tukey_results$group$p.adj
tukey_results$group
# Adjust p-values using FDR (False Discovery Rate)
tukey_results$group <- p.adjust(tukey_results$group, method = "fdr")
tukey_results$group
boxplot(disper)
# Adjust p-values using FDR (False Discovery Rate)
tukey_results$group <- p.adjust(tukey_results$group, method = "none")
tukey_results$group
TukeyHSD(disper)
tukey_results <- TukeyHSD.betadisper(disper)
TukeyHSD.betadisper(disper)
?TukeyHSD.betadisper
?TukeyHSD
tukey_results <- TukeyHSD(disper)
?betadisper
#Compute dispersion for groups (e.g., Habitat)
disper <- betadisper(dist_matrix, df_variables$habitat, type = "centroid", bias.adjust = T)
anova(disper) # Test for homogeneity of dispersion
boxplot(disper)
TukeyHSD(disper)
#Compute dispersion for groups (e.g., Habitat)
disper <- betadisper(dist_matrix, df_variables$habitat, type = "centroid", bias.adjust = F)
anova(disper) # Test for homogeneity of dispersion
boxplot(disper)
TukeyHSD(disper)
?betadisper
#Compute dispersion for groups (e.g., Habitat)
disper <- betadisper(dist_matrix, df_variables$habitat, type = "centroid", bias.adjust = T)
anova(disper) # Test for homogeneity of dispersion
boxplot(disper)
TukeyHSD(disper)
ggplot(coords_m1, aes(x = CAP1, y = CAP2, color=habitat)) +
geom_point(size = 2)+
stat_ellipse(aes(fill = habitat), alpha = 0.2, type = 't', size = 1, geom="polygon", level = 0.95)+
scale_color_discrete(name= "Habitat:")+
scale_shape_discrete(name = "Sampling method:")+
scale_x_continuous(name = "NMDS1")+
scale_y_continuous(name = "NMDS2")+
ggtitle("a)")+
theme(axis.text.y = element_text(colour = "black", size = text.size, face = "plain"),
axis.text.x = element_text(colour = "black", face = "plain", size = text.size),
axis.title.y = element_text(face = "plain", size = title.size),
axis.title.x = element_text(face = "plain", size = title.size, colour = "black"),
panel.grid.minor = element_blank(),
panel.grid.major = element_line(linetype = 'dotted', color = 'gray', linewidth = line.size),
panel.background = element_blank(),
panel.border = element_rect(colour = "black", fill = NA, linewidth = line.size),
legend.title = element_text(size = title.size, colour = "black", face = "plain"),
legend.text = element_text(size = text.size, face ="plain", colour ="black"),
legend.position = "top",
legend.box = "vertical",
legend.box.margin = margin(-4,0,-4,0, "pt"),
legend.margin = margin(0, 0, 0, 0, "pt"),
legend.key = element_blank(),
plot.margin = margin(0, 0, 0, 0, "cm"),
plot.title = element_text(size =title.size, face = "plain", hjust = -0.03, vjust = -1))+
guides(color = guide_legend(order=1, override.aes=list(shape = 21, size = 3)),
shape = guide_legend(order=2, override.aes=list(size = 2)))
boxplot(disper)
#Compute dispersion for groups (e.g., Habitat)
disper <- betadisper(dist_matrix, df_variables$habitat, type = "median", bias.adjust = T)
anova(disper) # Test for homogeneity of dispersion
boxplot(disper)
TukeyHSD(disper)
#Compute dispersion for groups (e.g., Habitat)
disper <- betadisper(dist_matrix, df_variables$habitat, type = "centroid", bias.adjust = T)
anova(disper) # Test for homogeneity of dispersion
boxplot(disper)
TukeyHSD(disper)
View(df_variables)
# Bray-Curtis dissimilarity (most common for community data)
bray_dist <- vegdist(df_species, method = "bray")  # Calculate the distance matrix
# Perform NMDS
nmds_result <- metaMDS(bray_dist, k = 2)  # k = dimensions (usually 2 or 3)
# Check stress (how well the NMDS represents the distances)
stressplot(nmds_result)
stress_value <-round(nmds_result$stress, digits = 3) # Extract the stress value
# Check convergence (important!)
nmds_result  # Look for "converged" in the output
# Extract NMDS coordinates
nmds_coords <- scores(nmds_result)
nmds_coords <- data.frame(nmds_coords, df_variables) # df2 is the data frame with rownames
#PLOT OPTIONS
text.size <- 8
text.size.small <- 6
title.size <- 9
line.size <- 0.3
line.size.thin <- 0.1
strip.text.size <- 8
# PLOT
library(ggplot2)
ggplot(nmds_coords, aes(x = NMDS1, y = NMDS2, color=habitat, shape = method)) +
geom_point(size = 2)+
stat_ellipse(aes(fill = habitat), alpha = 0.2, type = 't', size = 1, geom="polygon", level = 0.95)+
scale_color_discrete(name= "Habitat:")+
scale_shape_discrete(name = "Sampling method:")+
scale_x_continuous(name = "NMDS1")+
scale_y_continuous(name = "NMDS2")+
ggtitle("a)")+
annotate(geom="text", x=1.2, y=2, label=paste0("Stress Value = ",stress_value), color="black", size= text.size / .pt)+
theme(axis.text.y = element_text(colour = "black", size = text.size, face = "plain"),
axis.text.x = element_text(colour = "black", face = "plain", size = text.size),
axis.title.y = element_text(face = "plain", size = title.size),
axis.title.x = element_text(face = "plain", size = title.size, colour = "black"),
panel.grid.minor = element_blank(),
panel.grid.major = element_line(linetype = 'dotted', color = 'gray', linewidth = line.size),
panel.background = element_blank(),
panel.border = element_rect(colour = "black", fill = NA, linewidth = line.size),
legend.title = element_text(size = title.size, colour = "black", face = "plain"),
legend.text = element_text(size = text.size, face ="plain", colour ="black"),
legend.position = "top",
legend.box = "vertical",
legend.box.margin = margin(-4,0,-4,0, "pt"),
legend.margin = margin(0, 0, 0, 0, "pt"),
legend.key = element_blank(),
plot.margin = margin(0, 0, 0, 0, "cm"),
plot.title = element_text(size =title.size, face = "plain", hjust = -0.03, vjust = -1))+
guides(color = guide_legend(order=1, override.aes=list(shape = 21, size = 3)),
shape = guide_legend(order=2, override.aes=list(size = 2)))
ggplot(nmds_coords, aes(x = NMDS1, y = NMDS2, color=habitat)) +
geom_point(size = 2)+
stat_ellipse(aes(fill = habitat), alpha = 0.2, type = 't', size = 1, geom="polygon", level = 0.95)+
scale_color_discrete(name= "Habitat:")+
scale_shape_discrete(name = "Sampling method:")+
scale_x_continuous(name = "NMDS1")+
scale_y_continuous(name = "NMDS2")+
ggtitle("a)")+
annotate(geom="text", x=1.2, y=2, label=paste0("Stress Value = ",stress_value), color="black", size= text.size / .pt)+
theme(axis.text.y = element_text(colour = "black", size = text.size, face = "plain"),
axis.text.x = element_text(colour = "black", face = "plain", size = text.size),
axis.title.y = element_text(face = "plain", size = title.size),
axis.title.x = element_text(face = "plain", size = title.size, colour = "black"),
panel.grid.minor = element_blank(),
panel.grid.major = element_line(linetype = 'dotted', color = 'gray', linewidth = line.size),
panel.background = element_blank(),
panel.border = element_rect(colour = "black", fill = NA, linewidth = line.size),
legend.title = element_text(size = title.size, colour = "black", face = "plain"),
legend.text = element_text(size = text.size, face ="plain", colour ="black"),
legend.position = "top",
legend.box = "vertical",
legend.box.margin = margin(-4,0,-4,0, "pt"),
legend.margin = margin(0, 0, 0, 0, "pt"),
legend.key = element_blank(),
plot.margin = margin(0, 0, 0, 0, "cm"),
plot.title = element_text(size =title.size, face = "plain", hjust = -0.03, vjust = -1))+
guides(color = guide_legend(order=1, override.aes=list(shape = 21, size = 3)),
shape = guide_legend(order=2, override.aes=list(size = 2)))
# 2. Perform PERMANOVA using adonis2
permanova_result <- adonis2(bray_dist ~ habitat + method,
data = df_variables,
permutations = 9999,
by="terms")
# Bray-Curtis dissimilarity (most common for community data)
bray_dist <- vegdist(df_species, method = "bray")  # Calculate the distance matrix
# 2. Perform PERMANOVA using adonis2
permanova_result <- adonis2(bray_dist ~ habitat + method,
data = df_variables,
permutations = 9999,
by="terms")
# 2. Perform PERMANOVA using adonis2
permanova_result <- adonis2(bray_dist ~ habitat,
data = df_variables,
permutations = 9999,
by="terms")
permanova_result
library(pairwiseAdonis)
pairwise_results <- pairwise.adonis2(df_species ~ habitat, data = df_variables, permutations = 999, method = "bray")
library(pairwiseAdonis)
library(pairwiseAdonis)
pairwise_results <- pairwise.adonis2(df_species ~ habitat, data = df_variables, permutations = 999, method = "bray")
View(df_variables)
library(pairwiseAdonis)
pairwise_results <- pairwise.adonis2(df_species ~ habitat, data = df_variables, permutations = 999, method = "bray")
# 2. Perform PERMANOVA using adonis2
permanova_result <- adonis2(bray_dist ~ habitat,
data = df_variables,
permutations = 9999,
by="terms")
permanova_result
library(pairwiseAdonis)
pairwise_results <- pairwise.adonis2(df_species ~ habitat, data = df_variables, permutations = 999, method = "bray")
pairwise_results <- pairwise.adonis2(df_species ~ habitat, data = as.dataframe(df_variables), permutations = 999, method = "bray")
pairwise_results <- pairwise.adonis2(df_species ~ habitat, data = as.data.frame(df_variables), permutations = 999, method = "bray")
pairwise_results <- pairwise.adonis2(df_species ~ habitat, data = df_variables, permutations = 999, method = "bray")
class(df_)
class(df_variables)
pairwise_results <- pairwise.adonis2(df_species ~ habitat, data = df_variables, permutations = 999, method = "bray")
# Prin# Prin# Print the results
print(pairwise_results)
pairwise_results <- pairwise.adonis2(df_species ~ habitat, data = df_variables, permutations = 999, method = "bray")
# Perform NMDS
nmds_result <- metaMDS(bray_dist, k = 2)  # k = dimensions (usually 2 or 3)
# Check stress (how well the NMDS represents the distances)
stressplot(nmds_result)
stress_value <-round(nmds_result$stress, digits = 3) # Extract the stress value
# Check convergence (important!)
nmds_result  # Look for "converged" in the output
# Extract NMDS coordinates
nmds_coords <- scores(nmds_result)
nmds_coords <- data.frame(nmds_coords, df_variables) # df2 is the data frame with rownames
#PLOT OPTIONS
text.size <- 8
text.size.small <- 6
title.size <- 9
line.size <- 0.3
line.size.thin <- 0.1
strip.text.size <- 8
# PLOT
library(ggplot2)
ggplot(nmds_coords, aes(x = NMDS1, y = NMDS2, color=habitat)) +
geom_point(size = 2)+
stat_ellipse(aes(fill = habitat), alpha = 0.2, type = 't', size = 1, geom="polygon", level = 0.95)+
scale_color_discrete(name= "Habitat:")+
scale_shape_discrete(name = "Sampling method:")+
scale_x_continuous(name = "NMDS1")+
scale_y_continuous(name = "NMDS2")+
ggtitle("a)")+
annotate(geom="text", x=1.2, y=2, label=paste0("Stress Value = ",stress_value), color="black", size= text.size / .pt)+
theme(axis.text.y = element_text(colour = "black", size = text.size, face = "plain"),
axis.text.x = element_text(colour = "black", face = "plain", size = text.size),
axis.title.y = element_text(face = "plain", size = title.size),
axis.title.x = element_text(face = "plain", size = title.size, colour = "black"),
panel.grid.minor = element_blank(),
panel.grid.major = element_line(linetype = 'dotted', color = 'gray', linewidth = line.size),
panel.background = element_blank(),
panel.border = element_rect(colour = "black", fill = NA, linewidth = line.size),
legend.title = element_text(size = title.size, colour = "black", face = "plain"),
legend.text = element_text(size = text.size, face ="plain", colour ="black"),
legend.position = "top",
legend.box = "vertical",
legend.box.margin = margin(-4,0,-4,0, "pt"),
legend.margin = margin(0, 0, 0, 0, "pt"),
legend.key = element_blank(),
plot.margin = margin(0, 0, 0, 0, "cm"),
plot.title = element_text(size =title.size, face = "plain", hjust = -0.03, vjust = -1))+
guides(color = guide_legend(order=1, override.aes=list(shape = 21, size = 3)),
shape = guide_legend(order=2, override.aes=list(size = 2)))
plot(nmds_results)
# Perform NMDS
nmds_result <- metaMDS(bray_dist, k = 2)  # k = dimensions (usually 2 or 3)
plot(nmds_results)
plot(nmds_results$points)
plot(nmds_result$points)
# Check stress (how well the NMDS represents the distances)
stressplot(nmds_result)
stress_value <-round(nmds_result$stress, digits = 3) # Extract the stress value
# Check convergence (important!)
nmds_result  # Look for "converged" in the output
# Extract NMDS coordinates
nmds_coords <- scores(nmds_result)
nmds_coords <- data.frame(nmds_coords, df_variables) # df2 is the data frame with rownames
#PLOT OPTIONS
text.size <- 8
text.size.small <- 6
title.size <- 9
line.size <- 0.3
line.size.thin <- 0.1
strip.text.size <- 8
# PLOT
library(ggplot2)
ggplot(nmds_coords, aes(x = NMDS1, y = NMDS2, color=habitat)) +
geom_point(size = 2)+
stat_ellipse(aes(fill = habitat), alpha = 0.2, type = 't', size = 1, geom="polygon", level = 0.95)+
scale_color_discrete(name= "Habitat:")+
scale_shape_discrete(name = "Sampling method:")+
scale_x_continuous(name = "NMDS1")+
scale_y_continuous(name = "NMDS2")+
ggtitle("a)")+
annotate(geom="text", x=1.2, y=2, label=paste0("Stress Value = ",stress_value), color="black", size= text.size / .pt)+
theme(axis.text.y = element_text(colour = "black", size = text.size, face = "plain"),
axis.text.x = element_text(colour = "black", face = "plain", size = text.size),
axis.title.y = element_text(face = "plain", size = title.size),
axis.title.x = element_text(face = "plain", size = title.size, colour = "black"),
panel.grid.minor = element_blank(),
panel.grid.major = element_line(linetype = 'dotted', color = 'gray', linewidth = line.size),
panel.background = element_blank(),
panel.border = element_rect(colour = "black", fill = NA, linewidth = line.size),
legend.title = element_text(size = title.size, colour = "black", face = "plain"),
legend.text = element_text(size = text.size, face ="plain", colour ="black"),
legend.position = "top",
legend.box = "vertical",
legend.box.margin = margin(-4,0,-4,0, "pt"),
legend.margin = margin(0, 0, 0, 0, "pt"),
legend.key = element_blank(),
plot.margin = margin(0, 0, 0, 0, "cm"),
plot.title = element_text(size =title.size, face = "plain", hjust = -0.03, vjust = -1))+
guides(color = guide_legend(order=1, override.aes=list(shape = 21, size = 3)),
shape = guide_legend(order=2, override.aes=list(size = 2)))
plot(nmds_result$points)
# Assuming 'df_matrix' is your community data matrix and df$habitat and df$method are your factors
disper <- betadisper(bray_dist, type = "median", interaction(df_variables$habitat, df_variables$method)) # or df$habitat, df$method separately
# Assuming 'df_matrix' is your community data matrix and df$habitat and df$method are your factors
disper <- betadisper(bray_dist, type = "median", df_variables$habitat) # or df$habitat, df$method separately
disper[["distances"]]
anova(disper) # Test for homogeneity of dispersion
boxplot(disper)
TukeyHSD(disper)
# Assuming 'df_matrix' is your community data matrix and df$habitat and df$method are your factors
disper <- betadisper(bray_dist, type = "centroid", df_variables$habitat) # or df$habitat, df$method separately
disper[["distances"]]
anova(disper) # Test for homogeneity of dispersion
boxplot(disper)
TukeyHSD(disper)
boxplot(disper)
library('report')
report_table(permanova_result, include_effectsize = FALSE)
report(mod1)
library(mvabund)
#create a mvabund object (similar to a data.frame)
Herb_spp <- mvabund(df_species)
#model ALL species at once fitting many GLM's that share error structure.
mod1 <- manyglm(Herb_spp ~ df_variables$habitat, family="poisson")
report(mod1)
report_table(permanova_result, include_effectsize = FALSE)
library('xtable')
xtable(permanova_result, digits = 2)
setwd("D:/Google Drive/0-TEMPORAL/ant_hunter_website")
setwd("D:/Google Drive/0-TEMPORAL/ant_hunter_website")
library(leaflet)
leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=37.4119, lat=-6.006)
library(leaflet)
leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=6.006, lat=-37.4119)
library(leaflet)
leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=-6.006, lat=37.4119)
